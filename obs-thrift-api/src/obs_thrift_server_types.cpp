/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "obs_thrift_server_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




SourceDimensions::~SourceDimensions() noexcept {
}


void SourceDimensions::__set_leftMargin(const int32_t val) {
  this->leftMargin = val;
}

void SourceDimensions::__set_topMargin(const int32_t val) {
  this->topMargin = val;
}

void SourceDimensions::__set_relativeWidth(const double val) {
  this->relativeWidth = val;
}

void SourceDimensions::__set_relativeHeight(const double val) {
  this->relativeHeight = val;
}
std::ostream& operator<<(std::ostream& out, const SourceDimensions& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SourceDimensions::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->leftMargin);
          this->__isset.leftMargin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->topMargin);
          this->__isset.topMargin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->relativeWidth);
          this->__isset.relativeWidth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->relativeHeight);
          this->__isset.relativeHeight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SourceDimensions::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SourceDimensions");

  xfer += oprot->writeFieldBegin("leftMargin", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->leftMargin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("topMargin", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->topMargin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("relativeWidth", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->relativeWidth);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("relativeHeight", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->relativeHeight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SourceDimensions &a, SourceDimensions &b) {
  using ::std::swap;
  swap(a.leftMargin, b.leftMargin);
  swap(a.topMargin, b.topMargin);
  swap(a.relativeWidth, b.relativeWidth);
  swap(a.relativeHeight, b.relativeHeight);
  swap(a.__isset, b.__isset);
}

SourceDimensions::SourceDimensions(const SourceDimensions& other0) {
  leftMargin = other0.leftMargin;
  topMargin = other0.topMargin;
  relativeWidth = other0.relativeWidth;
  relativeHeight = other0.relativeHeight;
  __isset = other0.__isset;
}
SourceDimensions& SourceDimensions::operator=(const SourceDimensions& other1) {
  leftMargin = other1.leftMargin;
  topMargin = other1.topMargin;
  relativeWidth = other1.relativeWidth;
  relativeHeight = other1.relativeHeight;
  __isset = other1.__isset;
  return *this;
}
void SourceDimensions::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SourceDimensions(";
  out << "leftMargin=" << to_string(leftMargin);
  out << ", " << "topMargin=" << to_string(topMargin);
  out << ", " << "relativeWidth=" << to_string(relativeWidth);
  out << ", " << "relativeHeight=" << to_string(relativeHeight);
  out << ")";
}


