/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package scheduler;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.0)", date = "2020-03-29")
public class ObsThriftServer {

  public interface Iface {

    public void launchVideo(java.lang.String path, int layer, java.lang.String sceneName, java.lang.String sourceName, SourceDimensions dimensions) throws org.apache.thrift.TException;

    public void removeSource(java.lang.String sceneName, java.lang.String sourceName) throws org.apache.thrift.TException;

    public void muteSource(java.lang.String sourceName) throws org.apache.thrift.TException;

    public void unmuteSource(java.lang.String sourceName) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void launchVideo(java.lang.String path, int layer, java.lang.String sceneName, java.lang.String sourceName, SourceDimensions dimensions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void removeSource(java.lang.String sceneName, java.lang.String sourceName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void muteSource(java.lang.String sourceName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void unmuteSource(java.lang.String sourceName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void launchVideo(java.lang.String path, int layer, java.lang.String sceneName, java.lang.String sourceName, SourceDimensions dimensions) throws org.apache.thrift.TException
    {
      send_launchVideo(path, layer, sceneName, sourceName, dimensions);
      recv_launchVideo();
    }

    public void send_launchVideo(java.lang.String path, int layer, java.lang.String sceneName, java.lang.String sourceName, SourceDimensions dimensions) throws org.apache.thrift.TException
    {
      launchVideo_args args = new launchVideo_args();
      args.setPath(path);
      args.setLayer(layer);
      args.setSceneName(sceneName);
      args.setSourceName(sourceName);
      args.setDimensions(dimensions);
      sendBase("launchVideo", args);
    }

    public void recv_launchVideo() throws org.apache.thrift.TException
    {
      launchVideo_result result = new launchVideo_result();
      receiveBase(result, "launchVideo");
      return;
    }

    public void removeSource(java.lang.String sceneName, java.lang.String sourceName) throws org.apache.thrift.TException
    {
      send_removeSource(sceneName, sourceName);
      recv_removeSource();
    }

    public void send_removeSource(java.lang.String sceneName, java.lang.String sourceName) throws org.apache.thrift.TException
    {
      removeSource_args args = new removeSource_args();
      args.setSceneName(sceneName);
      args.setSourceName(sourceName);
      sendBase("removeSource", args);
    }

    public void recv_removeSource() throws org.apache.thrift.TException
    {
      removeSource_result result = new removeSource_result();
      receiveBase(result, "removeSource");
      return;
    }

    public void muteSource(java.lang.String sourceName) throws org.apache.thrift.TException
    {
      send_muteSource(sourceName);
      recv_muteSource();
    }

    public void send_muteSource(java.lang.String sourceName) throws org.apache.thrift.TException
    {
      muteSource_args args = new muteSource_args();
      args.setSourceName(sourceName);
      sendBase("muteSource", args);
    }

    public void recv_muteSource() throws org.apache.thrift.TException
    {
      muteSource_result result = new muteSource_result();
      receiveBase(result, "muteSource");
      return;
    }

    public void unmuteSource(java.lang.String sourceName) throws org.apache.thrift.TException
    {
      send_unmuteSource(sourceName);
      recv_unmuteSource();
    }

    public void send_unmuteSource(java.lang.String sourceName) throws org.apache.thrift.TException
    {
      unmuteSource_args args = new unmuteSource_args();
      args.setSourceName(sourceName);
      sendBase("unmuteSource", args);
    }

    public void recv_unmuteSource() throws org.apache.thrift.TException
    {
      unmuteSource_result result = new unmuteSource_result();
      receiveBase(result, "unmuteSource");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void launchVideo(java.lang.String path, int layer, java.lang.String sceneName, java.lang.String sourceName, SourceDimensions dimensions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      launchVideo_call method_call = new launchVideo_call(path, layer, sceneName, sourceName, dimensions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class launchVideo_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String path;
      private int layer;
      private java.lang.String sceneName;
      private java.lang.String sourceName;
      private SourceDimensions dimensions;
      public launchVideo_call(java.lang.String path, int layer, java.lang.String sceneName, java.lang.String sourceName, SourceDimensions dimensions, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.path = path;
        this.layer = layer;
        this.sceneName = sceneName;
        this.sourceName = sourceName;
        this.dimensions = dimensions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("launchVideo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        launchVideo_args args = new launchVideo_args();
        args.setPath(path);
        args.setLayer(layer);
        args.setSceneName(sceneName);
        args.setSourceName(sourceName);
        args.setDimensions(dimensions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void removeSource(java.lang.String sceneName, java.lang.String sourceName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeSource_call method_call = new removeSource_call(sceneName, sourceName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeSource_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String sceneName;
      private java.lang.String sourceName;
      public removeSource_call(java.lang.String sceneName, java.lang.String sourceName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sceneName = sceneName;
        this.sourceName = sourceName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeSource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeSource_args args = new removeSource_args();
        args.setSceneName(sceneName);
        args.setSourceName(sourceName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void muteSource(java.lang.String sourceName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      muteSource_call method_call = new muteSource_call(sourceName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class muteSource_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String sourceName;
      public muteSource_call(java.lang.String sourceName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sourceName = sourceName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("muteSource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        muteSource_args args = new muteSource_args();
        args.setSourceName(sourceName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void unmuteSource(java.lang.String sourceName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unmuteSource_call method_call = new unmuteSource_call(sourceName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unmuteSource_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String sourceName;
      public unmuteSource_call(java.lang.String sourceName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sourceName = sourceName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unmuteSource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unmuteSource_args args = new unmuteSource_args();
        args.setSourceName(sourceName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("launchVideo", new launchVideo());
      processMap.put("removeSource", new removeSource());
      processMap.put("muteSource", new muteSource());
      processMap.put("unmuteSource", new unmuteSource());
      return processMap;
    }

    public static class launchVideo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, launchVideo_args> {
      public launchVideo() {
        super("launchVideo");
      }

      public launchVideo_args getEmptyArgsInstance() {
        return new launchVideo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public launchVideo_result getResult(I iface, launchVideo_args args) throws org.apache.thrift.TException {
        launchVideo_result result = new launchVideo_result();
        iface.launchVideo(args.path, args.layer, args.sceneName, args.sourceName, args.dimensions);
        return result;
      }
    }

    public static class removeSource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeSource_args> {
      public removeSource() {
        super("removeSource");
      }

      public removeSource_args getEmptyArgsInstance() {
        return new removeSource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public removeSource_result getResult(I iface, removeSource_args args) throws org.apache.thrift.TException {
        removeSource_result result = new removeSource_result();
        iface.removeSource(args.sceneName, args.sourceName);
        return result;
      }
    }

    public static class muteSource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, muteSource_args> {
      public muteSource() {
        super("muteSource");
      }

      public muteSource_args getEmptyArgsInstance() {
        return new muteSource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public muteSource_result getResult(I iface, muteSource_args args) throws org.apache.thrift.TException {
        muteSource_result result = new muteSource_result();
        iface.muteSource(args.sourceName);
        return result;
      }
    }

    public static class unmuteSource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unmuteSource_args> {
      public unmuteSource() {
        super("unmuteSource");
      }

      public unmuteSource_args getEmptyArgsInstance() {
        return new unmuteSource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public unmuteSource_result getResult(I iface, unmuteSource_args args) throws org.apache.thrift.TException {
        unmuteSource_result result = new unmuteSource_result();
        iface.unmuteSource(args.sourceName);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("launchVideo", new launchVideo());
      processMap.put("removeSource", new removeSource());
      processMap.put("muteSource", new muteSource());
      processMap.put("unmuteSource", new unmuteSource());
      return processMap;
    }

    public static class launchVideo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, launchVideo_args, Void> {
      public launchVideo() {
        super("launchVideo");
      }

      public launchVideo_args getEmptyArgsInstance() {
        return new launchVideo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            launchVideo_result result = new launchVideo_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            launchVideo_result result = new launchVideo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, launchVideo_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.launchVideo(args.path, args.layer, args.sceneName, args.sourceName, args.dimensions,resultHandler);
      }
    }

    public static class removeSource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeSource_args, Void> {
      public removeSource() {
        super("removeSource");
      }

      public removeSource_args getEmptyArgsInstance() {
        return new removeSource_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeSource_result result = new removeSource_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            removeSource_result result = new removeSource_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeSource_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.removeSource(args.sceneName, args.sourceName,resultHandler);
      }
    }

    public static class muteSource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, muteSource_args, Void> {
      public muteSource() {
        super("muteSource");
      }

      public muteSource_args getEmptyArgsInstance() {
        return new muteSource_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            muteSource_result result = new muteSource_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            muteSource_result result = new muteSource_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, muteSource_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.muteSource(args.sourceName,resultHandler);
      }
    }

    public static class unmuteSource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, unmuteSource_args, Void> {
      public unmuteSource() {
        super("unmuteSource");
      }

      public unmuteSource_args getEmptyArgsInstance() {
        return new unmuteSource_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            unmuteSource_result result = new unmuteSource_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            unmuteSource_result result = new unmuteSource_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, unmuteSource_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.unmuteSource(args.sourceName,resultHandler);
      }
    }

  }

  public static class launchVideo_args implements org.apache.thrift.TBase<launchVideo_args, launchVideo_args._Fields>, java.io.Serializable, Cloneable, Comparable<launchVideo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("launchVideo_args");

    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LAYER_FIELD_DESC = new org.apache.thrift.protocol.TField("layer", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SCENE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sceneName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SOURCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DIMENSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("dimensions", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new launchVideo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new launchVideo_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String path; // required
    public int layer; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String sceneName; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String sourceName; // required
    public @org.apache.thrift.annotation.Nullable SourceDimensions dimensions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATH((short)1, "path"),
      LAYER((short)2, "layer"),
      SCENE_NAME((short)3, "sceneName"),
      SOURCE_NAME((short)4, "sourceName"),
      DIMENSIONS((short)5, "dimensions");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATH
            return PATH;
          case 2: // LAYER
            return LAYER;
          case 3: // SCENE_NAME
            return SCENE_NAME;
          case 4: // SOURCE_NAME
            return SOURCE_NAME;
          case 5: // DIMENSIONS
            return DIMENSIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LAYER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LAYER, new org.apache.thrift.meta_data.FieldMetaData("layer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SCENE_NAME, new org.apache.thrift.meta_data.FieldMetaData("sceneName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SOURCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("sourceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DIMENSIONS, new org.apache.thrift.meta_data.FieldMetaData("dimensions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SourceDimensions.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(launchVideo_args.class, metaDataMap);
    }

    public launchVideo_args() {
    }

    public launchVideo_args(
      java.lang.String path,
      int layer,
      java.lang.String sceneName,
      java.lang.String sourceName,
      SourceDimensions dimensions)
    {
      this();
      this.path = path;
      this.layer = layer;
      setLayerIsSet(true);
      this.sceneName = sceneName;
      this.sourceName = sourceName;
      this.dimensions = dimensions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public launchVideo_args(launchVideo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPath()) {
        this.path = other.path;
      }
      this.layer = other.layer;
      if (other.isSetSceneName()) {
        this.sceneName = other.sceneName;
      }
      if (other.isSetSourceName()) {
        this.sourceName = other.sourceName;
      }
      if (other.isSetDimensions()) {
        this.dimensions = new SourceDimensions(other.dimensions);
      }
    }

    public launchVideo_args deepCopy() {
      return new launchVideo_args(this);
    }

    @Override
    public void clear() {
      this.path = null;
      setLayerIsSet(false);
      this.layer = 0;
      this.sceneName = null;
      this.sourceName = null;
      this.dimensions = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getPath() {
      return this.path;
    }

    public launchVideo_args setPath(@org.apache.thrift.annotation.Nullable java.lang.String path) {
      this.path = path;
      return this;
    }

    public void unsetPath() {
      this.path = null;
    }

    /** Returns true if field path is set (has been assigned a value) and false otherwise */
    public boolean isSetPath() {
      return this.path != null;
    }

    public void setPathIsSet(boolean value) {
      if (!value) {
        this.path = null;
      }
    }

    public int getLayer() {
      return this.layer;
    }

    public launchVideo_args setLayer(int layer) {
      this.layer = layer;
      setLayerIsSet(true);
      return this;
    }

    public void unsetLayer() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LAYER_ISSET_ID);
    }

    /** Returns true if field layer is set (has been assigned a value) and false otherwise */
    public boolean isSetLayer() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LAYER_ISSET_ID);
    }

    public void setLayerIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LAYER_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSceneName() {
      return this.sceneName;
    }

    public launchVideo_args setSceneName(@org.apache.thrift.annotation.Nullable java.lang.String sceneName) {
      this.sceneName = sceneName;
      return this;
    }

    public void unsetSceneName() {
      this.sceneName = null;
    }

    /** Returns true if field sceneName is set (has been assigned a value) and false otherwise */
    public boolean isSetSceneName() {
      return this.sceneName != null;
    }

    public void setSceneNameIsSet(boolean value) {
      if (!value) {
        this.sceneName = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSourceName() {
      return this.sourceName;
    }

    public launchVideo_args setSourceName(@org.apache.thrift.annotation.Nullable java.lang.String sourceName) {
      this.sourceName = sourceName;
      return this;
    }

    public void unsetSourceName() {
      this.sourceName = null;
    }

    /** Returns true if field sourceName is set (has been assigned a value) and false otherwise */
    public boolean isSetSourceName() {
      return this.sourceName != null;
    }

    public void setSourceNameIsSet(boolean value) {
      if (!value) {
        this.sourceName = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public SourceDimensions getDimensions() {
      return this.dimensions;
    }

    public launchVideo_args setDimensions(@org.apache.thrift.annotation.Nullable SourceDimensions dimensions) {
      this.dimensions = dimensions;
      return this;
    }

    public void unsetDimensions() {
      this.dimensions = null;
    }

    /** Returns true if field dimensions is set (has been assigned a value) and false otherwise */
    public boolean isSetDimensions() {
      return this.dimensions != null;
    }

    public void setDimensionsIsSet(boolean value) {
      if (!value) {
        this.dimensions = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case PATH:
        if (value == null) {
          unsetPath();
        } else {
          setPath((java.lang.String)value);
        }
        break;

      case LAYER:
        if (value == null) {
          unsetLayer();
        } else {
          setLayer((java.lang.Integer)value);
        }
        break;

      case SCENE_NAME:
        if (value == null) {
          unsetSceneName();
        } else {
          setSceneName((java.lang.String)value);
        }
        break;

      case SOURCE_NAME:
        if (value == null) {
          unsetSourceName();
        } else {
          setSourceName((java.lang.String)value);
        }
        break;

      case DIMENSIONS:
        if (value == null) {
          unsetDimensions();
        } else {
          setDimensions((SourceDimensions)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PATH:
        return getPath();

      case LAYER:
        return getLayer();

      case SCENE_NAME:
        return getSceneName();

      case SOURCE_NAME:
        return getSourceName();

      case DIMENSIONS:
        return getDimensions();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PATH:
        return isSetPath();
      case LAYER:
        return isSetLayer();
      case SCENE_NAME:
        return isSetSceneName();
      case SOURCE_NAME:
        return isSetSourceName();
      case DIMENSIONS:
        return isSetDimensions();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof launchVideo_args)
        return this.equals((launchVideo_args)that);
      return false;
    }

    public boolean equals(launchVideo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_path = true && this.isSetPath();
      boolean that_present_path = true && that.isSetPath();
      if (this_present_path || that_present_path) {
        if (!(this_present_path && that_present_path))
          return false;
        if (!this.path.equals(that.path))
          return false;
      }

      boolean this_present_layer = true;
      boolean that_present_layer = true;
      if (this_present_layer || that_present_layer) {
        if (!(this_present_layer && that_present_layer))
          return false;
        if (this.layer != that.layer)
          return false;
      }

      boolean this_present_sceneName = true && this.isSetSceneName();
      boolean that_present_sceneName = true && that.isSetSceneName();
      if (this_present_sceneName || that_present_sceneName) {
        if (!(this_present_sceneName && that_present_sceneName))
          return false;
        if (!this.sceneName.equals(that.sceneName))
          return false;
      }

      boolean this_present_sourceName = true && this.isSetSourceName();
      boolean that_present_sourceName = true && that.isSetSourceName();
      if (this_present_sourceName || that_present_sourceName) {
        if (!(this_present_sourceName && that_present_sourceName))
          return false;
        if (!this.sourceName.equals(that.sourceName))
          return false;
      }

      boolean this_present_dimensions = true && this.isSetDimensions();
      boolean that_present_dimensions = true && that.isSetDimensions();
      if (this_present_dimensions || that_present_dimensions) {
        if (!(this_present_dimensions && that_present_dimensions))
          return false;
        if (!this.dimensions.equals(that.dimensions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
      if (isSetPath())
        hashCode = hashCode * 8191 + path.hashCode();

      hashCode = hashCode * 8191 + layer;

      hashCode = hashCode * 8191 + ((isSetSceneName()) ? 131071 : 524287);
      if (isSetSceneName())
        hashCode = hashCode * 8191 + sceneName.hashCode();

      hashCode = hashCode * 8191 + ((isSetSourceName()) ? 131071 : 524287);
      if (isSetSourceName())
        hashCode = hashCode * 8191 + sourceName.hashCode();

      hashCode = hashCode * 8191 + ((isSetDimensions()) ? 131071 : 524287);
      if (isSetDimensions())
        hashCode = hashCode * 8191 + dimensions.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(launchVideo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetPath(), other.isSetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetLayer(), other.isSetLayer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLayer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.layer, other.layer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetSceneName(), other.isSetSceneName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSceneName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sceneName, other.sceneName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetSourceName(), other.isSetSourceName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSourceName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceName, other.sourceName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetDimensions(), other.isSetDimensions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDimensions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dimensions, other.dimensions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("launchVideo_args(");
      boolean first = true;

      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("layer:");
      sb.append(this.layer);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sceneName:");
      if (this.sceneName == null) {
        sb.append("null");
      } else {
        sb.append(this.sceneName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sourceName:");
      if (this.sourceName == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dimensions:");
      if (this.dimensions == null) {
        sb.append("null");
      } else {
        sb.append(this.dimensions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dimensions != null) {
        dimensions.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class launchVideo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public launchVideo_argsStandardScheme getScheme() {
        return new launchVideo_argsStandardScheme();
      }
    }

    private static class launchVideo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<launchVideo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, launchVideo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.path = iprot.readString();
                struct.setPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LAYER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.layer = iprot.readI32();
                struct.setLayerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SCENE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sceneName = iprot.readString();
                struct.setSceneNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SOURCE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sourceName = iprot.readString();
                struct.setSourceNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DIMENSIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dimensions = new SourceDimensions();
                struct.dimensions.read(iprot);
                struct.setDimensionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, launchVideo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.path != null) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LAYER_FIELD_DESC);
        oprot.writeI32(struct.layer);
        oprot.writeFieldEnd();
        if (struct.sceneName != null) {
          oprot.writeFieldBegin(SCENE_NAME_FIELD_DESC);
          oprot.writeString(struct.sceneName);
          oprot.writeFieldEnd();
        }
        if (struct.sourceName != null) {
          oprot.writeFieldBegin(SOURCE_NAME_FIELD_DESC);
          oprot.writeString(struct.sourceName);
          oprot.writeFieldEnd();
        }
        if (struct.dimensions != null) {
          oprot.writeFieldBegin(DIMENSIONS_FIELD_DESC);
          struct.dimensions.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class launchVideo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public launchVideo_argsTupleScheme getScheme() {
        return new launchVideo_argsTupleScheme();
      }
    }

    private static class launchVideo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<launchVideo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, launchVideo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPath()) {
          optionals.set(0);
        }
        if (struct.isSetLayer()) {
          optionals.set(1);
        }
        if (struct.isSetSceneName()) {
          optionals.set(2);
        }
        if (struct.isSetSourceName()) {
          optionals.set(3);
        }
        if (struct.isSetDimensions()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetPath()) {
          oprot.writeString(struct.path);
        }
        if (struct.isSetLayer()) {
          oprot.writeI32(struct.layer);
        }
        if (struct.isSetSceneName()) {
          oprot.writeString(struct.sceneName);
        }
        if (struct.isSetSourceName()) {
          oprot.writeString(struct.sourceName);
        }
        if (struct.isSetDimensions()) {
          struct.dimensions.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, launchVideo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.path = iprot.readString();
          struct.setPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.layer = iprot.readI32();
          struct.setLayerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.sceneName = iprot.readString();
          struct.setSceneNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sourceName = iprot.readString();
          struct.setSourceNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.dimensions = new SourceDimensions();
          struct.dimensions.read(iprot);
          struct.setDimensionsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class launchVideo_result implements org.apache.thrift.TBase<launchVideo_result, launchVideo_result._Fields>, java.io.Serializable, Cloneable, Comparable<launchVideo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("launchVideo_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new launchVideo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new launchVideo_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(launchVideo_result.class, metaDataMap);
    }

    public launchVideo_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public launchVideo_result(launchVideo_result other) {
    }

    public launchVideo_result deepCopy() {
      return new launchVideo_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof launchVideo_result)
        return this.equals((launchVideo_result)that);
      return false;
    }

    public boolean equals(launchVideo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(launchVideo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("launchVideo_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class launchVideo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public launchVideo_resultStandardScheme getScheme() {
        return new launchVideo_resultStandardScheme();
      }
    }

    private static class launchVideo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<launchVideo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, launchVideo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, launchVideo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class launchVideo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public launchVideo_resultTupleScheme getScheme() {
        return new launchVideo_resultTupleScheme();
      }
    }

    private static class launchVideo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<launchVideo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, launchVideo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, launchVideo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeSource_args implements org.apache.thrift.TBase<removeSource_args, removeSource_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeSource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeSource_args");

    private static final org.apache.thrift.protocol.TField SCENE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sceneName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SOURCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeSource_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeSource_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String sceneName; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String sourceName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCENE_NAME((short)1, "sceneName"),
      SOURCE_NAME((short)2, "sourceName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCENE_NAME
            return SCENE_NAME;
          case 2: // SOURCE_NAME
            return SOURCE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCENE_NAME, new org.apache.thrift.meta_data.FieldMetaData("sceneName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SOURCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("sourceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeSource_args.class, metaDataMap);
    }

    public removeSource_args() {
    }

    public removeSource_args(
      java.lang.String sceneName,
      java.lang.String sourceName)
    {
      this();
      this.sceneName = sceneName;
      this.sourceName = sourceName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeSource_args(removeSource_args other) {
      if (other.isSetSceneName()) {
        this.sceneName = other.sceneName;
      }
      if (other.isSetSourceName()) {
        this.sourceName = other.sourceName;
      }
    }

    public removeSource_args deepCopy() {
      return new removeSource_args(this);
    }

    @Override
    public void clear() {
      this.sceneName = null;
      this.sourceName = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSceneName() {
      return this.sceneName;
    }

    public removeSource_args setSceneName(@org.apache.thrift.annotation.Nullable java.lang.String sceneName) {
      this.sceneName = sceneName;
      return this;
    }

    public void unsetSceneName() {
      this.sceneName = null;
    }

    /** Returns true if field sceneName is set (has been assigned a value) and false otherwise */
    public boolean isSetSceneName() {
      return this.sceneName != null;
    }

    public void setSceneNameIsSet(boolean value) {
      if (!value) {
        this.sceneName = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSourceName() {
      return this.sourceName;
    }

    public removeSource_args setSourceName(@org.apache.thrift.annotation.Nullable java.lang.String sourceName) {
      this.sourceName = sourceName;
      return this;
    }

    public void unsetSourceName() {
      this.sourceName = null;
    }

    /** Returns true if field sourceName is set (has been assigned a value) and false otherwise */
    public boolean isSetSourceName() {
      return this.sourceName != null;
    }

    public void setSourceNameIsSet(boolean value) {
      if (!value) {
        this.sourceName = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SCENE_NAME:
        if (value == null) {
          unsetSceneName();
        } else {
          setSceneName((java.lang.String)value);
        }
        break;

      case SOURCE_NAME:
        if (value == null) {
          unsetSourceName();
        } else {
          setSourceName((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCENE_NAME:
        return getSceneName();

      case SOURCE_NAME:
        return getSourceName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCENE_NAME:
        return isSetSceneName();
      case SOURCE_NAME:
        return isSetSourceName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof removeSource_args)
        return this.equals((removeSource_args)that);
      return false;
    }

    public boolean equals(removeSource_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sceneName = true && this.isSetSceneName();
      boolean that_present_sceneName = true && that.isSetSceneName();
      if (this_present_sceneName || that_present_sceneName) {
        if (!(this_present_sceneName && that_present_sceneName))
          return false;
        if (!this.sceneName.equals(that.sceneName))
          return false;
      }

      boolean this_present_sourceName = true && this.isSetSourceName();
      boolean that_present_sourceName = true && that.isSetSourceName();
      if (this_present_sourceName || that_present_sourceName) {
        if (!(this_present_sourceName && that_present_sourceName))
          return false;
        if (!this.sourceName.equals(that.sourceName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSceneName()) ? 131071 : 524287);
      if (isSetSceneName())
        hashCode = hashCode * 8191 + sceneName.hashCode();

      hashCode = hashCode * 8191 + ((isSetSourceName()) ? 131071 : 524287);
      if (isSetSourceName())
        hashCode = hashCode * 8191 + sourceName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(removeSource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSceneName(), other.isSetSceneName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSceneName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sceneName, other.sceneName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetSourceName(), other.isSetSourceName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSourceName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceName, other.sourceName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeSource_args(");
      boolean first = true;

      sb.append("sceneName:");
      if (this.sceneName == null) {
        sb.append("null");
      } else {
        sb.append(this.sceneName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sourceName:");
      if (this.sourceName == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeSource_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeSource_argsStandardScheme getScheme() {
        return new removeSource_argsStandardScheme();
      }
    }

    private static class removeSource_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeSource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeSource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCENE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sceneName = iprot.readString();
                struct.setSceneNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SOURCE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sourceName = iprot.readString();
                struct.setSourceNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeSource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sceneName != null) {
          oprot.writeFieldBegin(SCENE_NAME_FIELD_DESC);
          oprot.writeString(struct.sceneName);
          oprot.writeFieldEnd();
        }
        if (struct.sourceName != null) {
          oprot.writeFieldBegin(SOURCE_NAME_FIELD_DESC);
          oprot.writeString(struct.sourceName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeSource_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeSource_argsTupleScheme getScheme() {
        return new removeSource_argsTupleScheme();
      }
    }

    private static class removeSource_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeSource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeSource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSceneName()) {
          optionals.set(0);
        }
        if (struct.isSetSourceName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSceneName()) {
          oprot.writeString(struct.sceneName);
        }
        if (struct.isSetSourceName()) {
          oprot.writeString(struct.sourceName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeSource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sceneName = iprot.readString();
          struct.setSceneNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sourceName = iprot.readString();
          struct.setSourceNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeSource_result implements org.apache.thrift.TBase<removeSource_result, removeSource_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeSource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeSource_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeSource_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeSource_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeSource_result.class, metaDataMap);
    }

    public removeSource_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeSource_result(removeSource_result other) {
    }

    public removeSource_result deepCopy() {
      return new removeSource_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof removeSource_result)
        return this.equals((removeSource_result)that);
      return false;
    }

    public boolean equals(removeSource_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(removeSource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeSource_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeSource_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeSource_resultStandardScheme getScheme() {
        return new removeSource_resultStandardScheme();
      }
    }

    private static class removeSource_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeSource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeSource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeSource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeSource_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeSource_resultTupleScheme getScheme() {
        return new removeSource_resultTupleScheme();
      }
    }

    private static class removeSource_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeSource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeSource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeSource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class muteSource_args implements org.apache.thrift.TBase<muteSource_args, muteSource_args._Fields>, java.io.Serializable, Cloneable, Comparable<muteSource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("muteSource_args");

    private static final org.apache.thrift.protocol.TField SOURCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new muteSource_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new muteSource_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String sourceName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SOURCE_NAME((short)1, "sourceName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SOURCE_NAME
            return SOURCE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SOURCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("sourceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(muteSource_args.class, metaDataMap);
    }

    public muteSource_args() {
    }

    public muteSource_args(
      java.lang.String sourceName)
    {
      this();
      this.sourceName = sourceName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public muteSource_args(muteSource_args other) {
      if (other.isSetSourceName()) {
        this.sourceName = other.sourceName;
      }
    }

    public muteSource_args deepCopy() {
      return new muteSource_args(this);
    }

    @Override
    public void clear() {
      this.sourceName = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSourceName() {
      return this.sourceName;
    }

    public muteSource_args setSourceName(@org.apache.thrift.annotation.Nullable java.lang.String sourceName) {
      this.sourceName = sourceName;
      return this;
    }

    public void unsetSourceName() {
      this.sourceName = null;
    }

    /** Returns true if field sourceName is set (has been assigned a value) and false otherwise */
    public boolean isSetSourceName() {
      return this.sourceName != null;
    }

    public void setSourceNameIsSet(boolean value) {
      if (!value) {
        this.sourceName = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SOURCE_NAME:
        if (value == null) {
          unsetSourceName();
        } else {
          setSourceName((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SOURCE_NAME:
        return getSourceName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SOURCE_NAME:
        return isSetSourceName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof muteSource_args)
        return this.equals((muteSource_args)that);
      return false;
    }

    public boolean equals(muteSource_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sourceName = true && this.isSetSourceName();
      boolean that_present_sourceName = true && that.isSetSourceName();
      if (this_present_sourceName || that_present_sourceName) {
        if (!(this_present_sourceName && that_present_sourceName))
          return false;
        if (!this.sourceName.equals(that.sourceName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSourceName()) ? 131071 : 524287);
      if (isSetSourceName())
        hashCode = hashCode * 8191 + sourceName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(muteSource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSourceName(), other.isSetSourceName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSourceName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceName, other.sourceName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("muteSource_args(");
      boolean first = true;

      sb.append("sourceName:");
      if (this.sourceName == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class muteSource_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public muteSource_argsStandardScheme getScheme() {
        return new muteSource_argsStandardScheme();
      }
    }

    private static class muteSource_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<muteSource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, muteSource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SOURCE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sourceName = iprot.readString();
                struct.setSourceNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, muteSource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sourceName != null) {
          oprot.writeFieldBegin(SOURCE_NAME_FIELD_DESC);
          oprot.writeString(struct.sourceName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class muteSource_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public muteSource_argsTupleScheme getScheme() {
        return new muteSource_argsTupleScheme();
      }
    }

    private static class muteSource_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<muteSource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, muteSource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSourceName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSourceName()) {
          oprot.writeString(struct.sourceName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, muteSource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sourceName = iprot.readString();
          struct.setSourceNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class muteSource_result implements org.apache.thrift.TBase<muteSource_result, muteSource_result._Fields>, java.io.Serializable, Cloneable, Comparable<muteSource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("muteSource_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new muteSource_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new muteSource_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(muteSource_result.class, metaDataMap);
    }

    public muteSource_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public muteSource_result(muteSource_result other) {
    }

    public muteSource_result deepCopy() {
      return new muteSource_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof muteSource_result)
        return this.equals((muteSource_result)that);
      return false;
    }

    public boolean equals(muteSource_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(muteSource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("muteSource_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class muteSource_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public muteSource_resultStandardScheme getScheme() {
        return new muteSource_resultStandardScheme();
      }
    }

    private static class muteSource_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<muteSource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, muteSource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, muteSource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class muteSource_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public muteSource_resultTupleScheme getScheme() {
        return new muteSource_resultTupleScheme();
      }
    }

    private static class muteSource_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<muteSource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, muteSource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, muteSource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class unmuteSource_args implements org.apache.thrift.TBase<unmuteSource_args, unmuteSource_args._Fields>, java.io.Serializable, Cloneable, Comparable<unmuteSource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unmuteSource_args");

    private static final org.apache.thrift.protocol.TField SOURCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new unmuteSource_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new unmuteSource_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String sourceName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SOURCE_NAME((short)1, "sourceName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SOURCE_NAME
            return SOURCE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SOURCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("sourceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unmuteSource_args.class, metaDataMap);
    }

    public unmuteSource_args() {
    }

    public unmuteSource_args(
      java.lang.String sourceName)
    {
      this();
      this.sourceName = sourceName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unmuteSource_args(unmuteSource_args other) {
      if (other.isSetSourceName()) {
        this.sourceName = other.sourceName;
      }
    }

    public unmuteSource_args deepCopy() {
      return new unmuteSource_args(this);
    }

    @Override
    public void clear() {
      this.sourceName = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSourceName() {
      return this.sourceName;
    }

    public unmuteSource_args setSourceName(@org.apache.thrift.annotation.Nullable java.lang.String sourceName) {
      this.sourceName = sourceName;
      return this;
    }

    public void unsetSourceName() {
      this.sourceName = null;
    }

    /** Returns true if field sourceName is set (has been assigned a value) and false otherwise */
    public boolean isSetSourceName() {
      return this.sourceName != null;
    }

    public void setSourceNameIsSet(boolean value) {
      if (!value) {
        this.sourceName = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SOURCE_NAME:
        if (value == null) {
          unsetSourceName();
        } else {
          setSourceName((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SOURCE_NAME:
        return getSourceName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SOURCE_NAME:
        return isSetSourceName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof unmuteSource_args)
        return this.equals((unmuteSource_args)that);
      return false;
    }

    public boolean equals(unmuteSource_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sourceName = true && this.isSetSourceName();
      boolean that_present_sourceName = true && that.isSetSourceName();
      if (this_present_sourceName || that_present_sourceName) {
        if (!(this_present_sourceName && that_present_sourceName))
          return false;
        if (!this.sourceName.equals(that.sourceName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSourceName()) ? 131071 : 524287);
      if (isSetSourceName())
        hashCode = hashCode * 8191 + sourceName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(unmuteSource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSourceName(), other.isSetSourceName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSourceName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceName, other.sourceName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("unmuteSource_args(");
      boolean first = true;

      sb.append("sourceName:");
      if (this.sourceName == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unmuteSource_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public unmuteSource_argsStandardScheme getScheme() {
        return new unmuteSource_argsStandardScheme();
      }
    }

    private static class unmuteSource_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<unmuteSource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unmuteSource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SOURCE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sourceName = iprot.readString();
                struct.setSourceNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unmuteSource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sourceName != null) {
          oprot.writeFieldBegin(SOURCE_NAME_FIELD_DESC);
          oprot.writeString(struct.sourceName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unmuteSource_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public unmuteSource_argsTupleScheme getScheme() {
        return new unmuteSource_argsTupleScheme();
      }
    }

    private static class unmuteSource_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<unmuteSource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unmuteSource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSourceName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSourceName()) {
          oprot.writeString(struct.sourceName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unmuteSource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sourceName = iprot.readString();
          struct.setSourceNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class unmuteSource_result implements org.apache.thrift.TBase<unmuteSource_result, unmuteSource_result._Fields>, java.io.Serializable, Cloneable, Comparable<unmuteSource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unmuteSource_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new unmuteSource_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new unmuteSource_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unmuteSource_result.class, metaDataMap);
    }

    public unmuteSource_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unmuteSource_result(unmuteSource_result other) {
    }

    public unmuteSource_result deepCopy() {
      return new unmuteSource_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof unmuteSource_result)
        return this.equals((unmuteSource_result)that);
      return false;
    }

    public boolean equals(unmuteSource_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(unmuteSource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("unmuteSource_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unmuteSource_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public unmuteSource_resultStandardScheme getScheme() {
        return new unmuteSource_resultStandardScheme();
      }
    }

    private static class unmuteSource_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<unmuteSource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unmuteSource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unmuteSource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unmuteSource_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public unmuteSource_resultTupleScheme getScheme() {
        return new unmuteSource_resultTupleScheme();
      }
    }

    private static class unmuteSource_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<unmuteSource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unmuteSource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unmuteSource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
