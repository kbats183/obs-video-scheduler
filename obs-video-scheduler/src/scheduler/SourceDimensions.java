/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package scheduler;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.0)", date = "2020-03-29")
public class SourceDimensions implements org.apache.thrift.TBase<SourceDimensions, SourceDimensions._Fields>, java.io.Serializable, Cloneable, Comparable<SourceDimensions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SourceDimensions");

  private static final org.apache.thrift.protocol.TField LEFT_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("leftMargin", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TOP_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("topMargin", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField RELATIVE_WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("relativeWidth", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField RELATIVE_HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("relativeHeight", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SourceDimensionsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SourceDimensionsTupleSchemeFactory();

  public int leftMargin; // required
  public int topMargin; // required
  public double relativeWidth; // required
  public double relativeHeight; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LEFT_MARGIN((short)1, "leftMargin"),
    TOP_MARGIN((short)2, "topMargin"),
    RELATIVE_WIDTH((short)3, "relativeWidth"),
    RELATIVE_HEIGHT((short)4, "relativeHeight");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LEFT_MARGIN
          return LEFT_MARGIN;
        case 2: // TOP_MARGIN
          return TOP_MARGIN;
        case 3: // RELATIVE_WIDTH
          return RELATIVE_WIDTH;
        case 4: // RELATIVE_HEIGHT
          return RELATIVE_HEIGHT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LEFTMARGIN_ISSET_ID = 0;
  private static final int __TOPMARGIN_ISSET_ID = 1;
  private static final int __RELATIVEWIDTH_ISSET_ID = 2;
  private static final int __RELATIVEHEIGHT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LEFT_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("leftMargin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOP_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("topMargin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RELATIVE_WIDTH, new org.apache.thrift.meta_data.FieldMetaData("relativeWidth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RELATIVE_HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("relativeHeight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SourceDimensions.class, metaDataMap);
  }

  public SourceDimensions() {
    this.leftMargin = 0;

    this.topMargin = 0;

    this.relativeWidth = 1.0000000000000000;

    this.relativeHeight = 1.0000000000000000;

  }

  public SourceDimensions(
    int leftMargin,
    int topMargin,
    double relativeWidth,
    double relativeHeight)
  {
    this();
    this.leftMargin = leftMargin;
    setLeftMarginIsSet(true);
    this.topMargin = topMargin;
    setTopMarginIsSet(true);
    this.relativeWidth = relativeWidth;
    setRelativeWidthIsSet(true);
    this.relativeHeight = relativeHeight;
    setRelativeHeightIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SourceDimensions(SourceDimensions other) {
    __isset_bitfield = other.__isset_bitfield;
    this.leftMargin = other.leftMargin;
    this.topMargin = other.topMargin;
    this.relativeWidth = other.relativeWidth;
    this.relativeHeight = other.relativeHeight;
  }

  public SourceDimensions deepCopy() {
    return new SourceDimensions(this);
  }

  @Override
  public void clear() {
    this.leftMargin = 0;

    this.topMargin = 0;

    this.relativeWidth = 1.0000000000000000;

    this.relativeHeight = 1.0000000000000000;

  }

  public int getLeftMargin() {
    return this.leftMargin;
  }

  public SourceDimensions setLeftMargin(int leftMargin) {
    this.leftMargin = leftMargin;
    setLeftMarginIsSet(true);
    return this;
  }

  public void unsetLeftMargin() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LEFTMARGIN_ISSET_ID);
  }

  /** Returns true if field leftMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetLeftMargin() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LEFTMARGIN_ISSET_ID);
  }

  public void setLeftMarginIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LEFTMARGIN_ISSET_ID, value);
  }

  public int getTopMargin() {
    return this.topMargin;
  }

  public SourceDimensions setTopMargin(int topMargin) {
    this.topMargin = topMargin;
    setTopMarginIsSet(true);
    return this;
  }

  public void unsetTopMargin() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOPMARGIN_ISSET_ID);
  }

  /** Returns true if field topMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetTopMargin() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOPMARGIN_ISSET_ID);
  }

  public void setTopMarginIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOPMARGIN_ISSET_ID, value);
  }

  public double getRelativeWidth() {
    return this.relativeWidth;
  }

  public SourceDimensions setRelativeWidth(double relativeWidth) {
    this.relativeWidth = relativeWidth;
    setRelativeWidthIsSet(true);
    return this;
  }

  public void unsetRelativeWidth() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RELATIVEWIDTH_ISSET_ID);
  }

  /** Returns true if field relativeWidth is set (has been assigned a value) and false otherwise */
  public boolean isSetRelativeWidth() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RELATIVEWIDTH_ISSET_ID);
  }

  public void setRelativeWidthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RELATIVEWIDTH_ISSET_ID, value);
  }

  public double getRelativeHeight() {
    return this.relativeHeight;
  }

  public SourceDimensions setRelativeHeight(double relativeHeight) {
    this.relativeHeight = relativeHeight;
    setRelativeHeightIsSet(true);
    return this;
  }

  public void unsetRelativeHeight() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RELATIVEHEIGHT_ISSET_ID);
  }

  /** Returns true if field relativeHeight is set (has been assigned a value) and false otherwise */
  public boolean isSetRelativeHeight() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RELATIVEHEIGHT_ISSET_ID);
  }

  public void setRelativeHeightIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RELATIVEHEIGHT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case LEFT_MARGIN:
      if (value == null) {
        unsetLeftMargin();
      } else {
        setLeftMargin((java.lang.Integer)value);
      }
      break;

    case TOP_MARGIN:
      if (value == null) {
        unsetTopMargin();
      } else {
        setTopMargin((java.lang.Integer)value);
      }
      break;

    case RELATIVE_WIDTH:
      if (value == null) {
        unsetRelativeWidth();
      } else {
        setRelativeWidth((java.lang.Double)value);
      }
      break;

    case RELATIVE_HEIGHT:
      if (value == null) {
        unsetRelativeHeight();
      } else {
        setRelativeHeight((java.lang.Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LEFT_MARGIN:
      return getLeftMargin();

    case TOP_MARGIN:
      return getTopMargin();

    case RELATIVE_WIDTH:
      return getRelativeWidth();

    case RELATIVE_HEIGHT:
      return getRelativeHeight();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LEFT_MARGIN:
      return isSetLeftMargin();
    case TOP_MARGIN:
      return isSetTopMargin();
    case RELATIVE_WIDTH:
      return isSetRelativeWidth();
    case RELATIVE_HEIGHT:
      return isSetRelativeHeight();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof SourceDimensions)
      return this.equals((SourceDimensions)that);
    return false;
  }

  public boolean equals(SourceDimensions that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_leftMargin = true;
    boolean that_present_leftMargin = true;
    if (this_present_leftMargin || that_present_leftMargin) {
      if (!(this_present_leftMargin && that_present_leftMargin))
        return false;
      if (this.leftMargin != that.leftMargin)
        return false;
    }

    boolean this_present_topMargin = true;
    boolean that_present_topMargin = true;
    if (this_present_topMargin || that_present_topMargin) {
      if (!(this_present_topMargin && that_present_topMargin))
        return false;
      if (this.topMargin != that.topMargin)
        return false;
    }

    boolean this_present_relativeWidth = true;
    boolean that_present_relativeWidth = true;
    if (this_present_relativeWidth || that_present_relativeWidth) {
      if (!(this_present_relativeWidth && that_present_relativeWidth))
        return false;
      if (this.relativeWidth != that.relativeWidth)
        return false;
    }

    boolean this_present_relativeHeight = true;
    boolean that_present_relativeHeight = true;
    if (this_present_relativeHeight || that_present_relativeHeight) {
      if (!(this_present_relativeHeight && that_present_relativeHeight))
        return false;
      if (this.relativeHeight != that.relativeHeight)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + leftMargin;

    hashCode = hashCode * 8191 + topMargin;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(relativeWidth);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(relativeHeight);

    return hashCode;
  }

  @Override
  public int compareTo(SourceDimensions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetLeftMargin(), other.isSetLeftMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeftMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leftMargin, other.leftMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTopMargin(), other.isSetTopMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topMargin, other.topMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRelativeWidth(), other.isSetRelativeWidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelativeWidth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relativeWidth, other.relativeWidth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRelativeHeight(), other.isSetRelativeHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelativeHeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relativeHeight, other.relativeHeight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SourceDimensions(");
    boolean first = true;

    sb.append("leftMargin:");
    sb.append(this.leftMargin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("topMargin:");
    sb.append(this.topMargin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("relativeWidth:");
    sb.append(this.relativeWidth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("relativeHeight:");
    sb.append(this.relativeHeight);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SourceDimensionsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SourceDimensionsStandardScheme getScheme() {
      return new SourceDimensionsStandardScheme();
    }
  }

  private static class SourceDimensionsStandardScheme extends org.apache.thrift.scheme.StandardScheme<SourceDimensions> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SourceDimensions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LEFT_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.leftMargin = iprot.readI32();
              struct.setLeftMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOP_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.topMargin = iprot.readI32();
              struct.setTopMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RELATIVE_WIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.relativeWidth = iprot.readDouble();
              struct.setRelativeWidthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RELATIVE_HEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.relativeHeight = iprot.readDouble();
              struct.setRelativeHeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SourceDimensions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LEFT_MARGIN_FIELD_DESC);
      oprot.writeI32(struct.leftMargin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOP_MARGIN_FIELD_DESC);
      oprot.writeI32(struct.topMargin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RELATIVE_WIDTH_FIELD_DESC);
      oprot.writeDouble(struct.relativeWidth);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RELATIVE_HEIGHT_FIELD_DESC);
      oprot.writeDouble(struct.relativeHeight);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SourceDimensionsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SourceDimensionsTupleScheme getScheme() {
      return new SourceDimensionsTupleScheme();
    }
  }

  private static class SourceDimensionsTupleScheme extends org.apache.thrift.scheme.TupleScheme<SourceDimensions> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SourceDimensions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLeftMargin()) {
        optionals.set(0);
      }
      if (struct.isSetTopMargin()) {
        optionals.set(1);
      }
      if (struct.isSetRelativeWidth()) {
        optionals.set(2);
      }
      if (struct.isSetRelativeHeight()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetLeftMargin()) {
        oprot.writeI32(struct.leftMargin);
      }
      if (struct.isSetTopMargin()) {
        oprot.writeI32(struct.topMargin);
      }
      if (struct.isSetRelativeWidth()) {
        oprot.writeDouble(struct.relativeWidth);
      }
      if (struct.isSetRelativeHeight()) {
        oprot.writeDouble(struct.relativeHeight);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SourceDimensions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.leftMargin = iprot.readI32();
        struct.setLeftMarginIsSet(true);
      }
      if (incoming.get(1)) {
        struct.topMargin = iprot.readI32();
        struct.setTopMarginIsSet(true);
      }
      if (incoming.get(2)) {
        struct.relativeWidth = iprot.readDouble();
        struct.setRelativeWidthIsSet(true);
      }
      if (incoming.get(3)) {
        struct.relativeHeight = iprot.readDouble();
        struct.setRelativeHeightIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

